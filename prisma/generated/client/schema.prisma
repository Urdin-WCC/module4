generator client {
  provider = "prisma-client-js"
  output   = "./generated/client" // Especificar ruta de salida explícita
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  MASTER
  ADMIN
  EDITOR
  COLLABORATOR
}

enum WidgetType {
  LATEST_POSTS
  SEARCH
  CATEGORIES
  TAGS
  SOCIAL_LINKS
  TEXT
  NEWSLETTER
  RECENT_COMMENTS
}

enum SectionType {
  HEADER
  FOOTER
  SIDEBAR
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  role          Role      @default(COLLABORATOR)
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  posts         Post[] // Relation to posts authored by the user
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "Account_userId_fkey")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "Session_userId_fkey")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model GlobalConfig {
  id              String   @id @default("global")
  siteName        String   @default("Neurowitch")
  siteUrl         String   @default("http://localhost:3000")
  logoUrl         String?
  faviconUrl      String?
  themeColor      String?
  maintenanceMode Boolean  @default(false)
  activeThemeId   String?  @default("default")
  // Configuración de header (campos: logo, enlaces, etc.)
  header          Json?
  // Configuración de footer (widgets, altura, HTML secundario, etc.)
  footer          Json?
  // Configuración de sidebar (widgets, posición, ancho, etc.)
  sidebar         Json?
  // Enlaces sociales
  social          Json?
  // Botones de compartir
  sharing         Json?
  // Configuración específica del Blog
  blogConfig      Json?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model AdminAction {
  id        String   @id @default(cuid())
  userId    String
  action    String
  details   String?  @db.Text
  module    String
  createdAt DateTime @default(now())
}

model ThemePreset {
  id           String   @id @default(cuid())
  name         String
  description  String?
  isActive     Boolean  @default(false)
  cssVariables Json
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Widget {
  id        String      @id @default(cuid())
  title     String
  type      WidgetType
  content   String?     @db.Text
  config    Json?
  order     Int         @default(0)
  isActive  Boolean     @default(true)
  sectionId String
  section   SiteSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model SiteSection {
  id        String      @id @default(cuid())
  name      String
  type      SectionType
  isActive  Boolean     @default(true)
  widgets   Widget[]
  menuItems MenuItem[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model MenuItem {
  id        String      @id @default(cuid())
  label     String
  url       String
  order     Int         @default(0)
  parentId  String?
  parent    MenuItem?   @relation("MenuItemToMenuItem", fields: [parentId], references: [id], onDelete: SetNull)
  children  MenuItem[]  @relation("MenuItemToMenuItem")
  sectionId String
  section   SiteSection @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  isActive  Boolean     @default(true)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

// Estadísticas de visitas y páginas vistas
model Visit {
  id    String   @id @default(cuid())
  date  DateTime @unique // Día de la visita
  count Int      @default(0)
}

model PageView {
  id    String   @id @default(cuid())
  page  String
  date  DateTime // Día de la visita
  count Int      @default(0)
}

model Referrer {
  id       String   @id @default(cuid())
  referrer String
  date     DateTime // Día de la visita
  count    Int      @default(0)
}

// --- MODELOS BLOG ---
model Post {
  id                String     @id @default(cuid())
  title             String
  slug              String     @unique
  content           String     @db.Text
  excerpt           String?    @db.Text
  coverImage        String?
  status            PostStatus @default(DRAFT)
  publishedAt       DateTime?
  featured          Boolean    @default(false)
  authorDisplayName String? // Nombre del autor a mostrar públicamente (opcional)
  deleted           Boolean    @default(false)
  authorId          String?
  author            User?      @relation(fields: [authorId], references: [id], onDelete: SetNull)
  categories        Category[] @relation("PostCategories")
  tags              Tag[]      @relation("PostTags")
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Category {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?  @db.Text
  posts       Post[]   @relation("PostCategories")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  slug      String   @unique
  posts     Post[]   @relation("PostTags")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// --- FIN MODELOS BLOG ---
